{"version":3,"sources":["providersListApi.js","actions/index.js","reducers/mainReducer.js","sagas/dataMapper.js","sagas/api-saga.js","view-components/ProviderButton.js","components/ButtonPanel.js","view-components/DayForecast.js","view-components/ProviderForecastView.js","components/ProviderForecastBlock.js","view-components/Loader.js","components/Results.js","components/SearchInput.js","view-components/App.js","index.js"],"names":["providersApiSpec","WeatherBit","providerName","hostName","apiKey","getUrl","location","this","OpenWeather","WW_Online","providersName","prop","actions","BUTTON_CLICK","SHOW_LOADER","DATA_LOADED","API_ERRORED","SEND_REQUEST","CHANGE_INPUT","initProviderDataState","dataLoaded","loading","showloader","error","errorMessage","isButtonPressed","initState","searchRequest","providersData","Object","keys","providers","map","reducer","state","action","updateData","dataToChange","click","i","type","payload","inputvalue","fetchedDataMapper","dataToMap","data","slice","item","date","datetime","temp","Math","round","pressure","pres","wind","wind_spd","toFixed","desc","weather","description","humidity","rh","WeatherBitMapper","list","filter","dt_txt","includes","substr","main","speed","OpenWeatherMapMapper","avgtempC","hourly","windspeedKmph","weatherDesc","value","WwOnline","watchClick","loaderHandler","handleSendRequest","getProviderData","getQueryString","all","takeEvery","delay","select","put","url","currentProvider","call","fetchForecast","dataFromApi","dataMapped","dataMapper","console","log","queryString","axios","get","ProviderButton","handleClick","isPressed","Button","size","color","onClick","variant","connect","buttons","provider","ind","key","className","DayForecastBlock","day","month","ProviderForecastBlock","daysButtons","dataByDayCondition","Paper","ButtonGroup","aria-label","clickHandler","objKey","setState","props","indexToSlice","parseInt","match","Array","isArray","Date","getDate","getMonth","DayForecast","Component","ownProps","Loader","LinearProgress","results","message","useStyles","makeStyles","theme","dense","marginTop","inputValue","changeInput","ev","target","classes","TextField","id","label","placeholder","margin","onChange","App","initialiseSagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","apiSaga","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f16e2dc2.chunk.js","sourcesContent":["//Данные о провайдерах и их АПИ\nconst providersApiSpec = {\n  WeatherBit: {\n    providerName: 'WeatherBit',\n    hostName: 'https://api.weatherbit.io/v2.0/forecast/daily',\n    apiKey: 'ea37e393970247b18d43d2091aa7b95e',\n    getUrl: function (location) {\n      return `${this.hostName}?city=${location}&key=${this.apiKey}`\n    }\n  },\n  OpenWeather: {\n    providerName: 'OpenWeather',\n    hostName: 'https://api.openweathermap.org/data/2.5/forecast',\n    apiKey: '2b0c757f5810cdb1eb3a945f283be600',\n    getUrl: function (location) {\n      return `${this.hostName}?q=${location}&appid=${this.apiKey}`\n    }\n  },\n  WW_Online: {\n    providerName: 'WW_Online',\n    hostName: 'https://api.worldweatheronline.com/premium/v1/weather.ashx',\n    apiKey: 'f87c5c2e9e064353a1180848190709',\n    getUrl: function (location) {\n      return `${this.hostName}?q=${location}&key=${this.apiKey}&format=json&num_of_days=10`\n    }\n  }\n}\n\nexport default providersApiSpec;\n\n//объект со тескстовыми названиями провайдеров\nlet providersName = {};\n\n(() => {\n  let prop;\n  for (prop in providersApiSpec) {\n    providersName[prop] = providersApiSpec[prop].providerName\n  }\n})()\n\nexport { providersName }","export const actions = {\n  BUTTON_CLICK: `BUTTON_CLICK`,\n  SHOW_LOADER: 'SHOW_LOADER',\n  DATA_LOADED: 'DATA_LOADED',\n  API_ERRORED: 'API_ERRORED',\n  SEND_REQUEST: 'SEND_REQUEST',\n  CHANGE_INPUT: 'CHANGE_INPUT',\n}\n\nexport const handleClick = (providerName) => {\n  return {\n    type: actions.BUTTON_CLICK,\n    providerName\n  }\n}\n\nexport const showLoader = (providerName) => {\n  return {\n    type: actions.SHOW_LOADER,\n    providerName\n  }\n}\n\n\n","import providers from '../providersListApi';\nimport {actions} from '../actions'\n\nconst initProviderDataState = { //инит-стейт провайдера\n  dataLoaded: null,\n  loading: false,\n  showloader: false,\n  error: false,\n  errorMessage: null,\n  isButtonPressed: false,\n  providerName: null\n}\n\nconst initState = { // инит-стейт всего стора\n  searchRequest: 'moscow',\n  providersData: Object.keys(providers).map(providerName => {\n    return {\n      ...initProviderDataState, providerName\n    }\n  })\n}\n\nconst reducer = (state = initState, action) => {\n\n  //ф-я формирует объект, исходя из типа менямых даннных,\n  //и передает его в редьюсер для нужного экшена для смены стейта.\n  const updateData = (dataToChange, click = true) => {\n    return (state.providersData.map(i =>\n      i.providerName === action.providerName ?\n        {\n          ...initProviderDataState,\n          providerName: action.providerName,\n          isButtonPressed: click === 'click' ? !i.isButtonPressed : true,\n          ...dataToChange\n        }\n        : i))\n  }\n\n  switch (action.type) {\n    case actions.DATA_LOADED:\n      return {\n        ...state,\n        providersData: updateData({ dataLoaded: action.payload })\n\n      }\n\n    case actions.API_ERRORED:\n      return {\n        ...state,\n        providersData: updateData({ error: true, errorMessage: action.payload })\n      }\n\n    case actions.SEND_REQUEST:\n      return {\n        ...state,\n        providersData: updateData({ loading: true })\n\n      }\n\n    case actions.CHANGE_INPUT:\n      return {\n        ...state,\n        searchRequest: action.inputvalue\n      }\n\n    case actions.BUTTON_CLICK:\n      return {\n        ...state,\n        providersData: updateData(null, 'click')\n      }\n\n    case actions.SHOW_LOADER:\n      return {\n        ...state,\n        providersData: updateData({ showloader: true, loading: true })\n      }\n\n    default:\n      return state\n  }\n}\n\nexport default reducer","import { providersName } from '../providersListApi'\n\n//Т.к. у всех провайдеров разный формат ответа, то необходимо для кажждого\n//написать ф-ю нормализации данных, чтобы хранить их в одном формате\n\n//ф-я вызывает нужную ф-ю по имени провайдера для преобразования \n//полученных данный с АПИ.\nfunction fetchedDataMapper(dataToMap, providerName) {\n  switch (providerName) {\n    case providersName.WeatherBit:\n      return WeatherBitMapper(dataToMap);\n\n    case providersName.OpenWeather:\n      return OpenWeatherMapMapper(dataToMap);\n\n    case providersName.WW_Online:\n      return WwOnline(dataToMap);\n\n    default:\n      return\n  }\n}\n\nexport default fetchedDataMapper;\n\nfunction WeatherBitMapper(dataToMap) {\n  const items = dataToMap.data\n  return items\n    .slice(0, 10)\n    .map((item) => ({\n      date: item.datetime,\n      temp: Math.round(item.temp),\n      pressure: Math.round(item.pres),\n      wind: item.wind_spd.toFixed(1),\n      desc: item.weather.description,\n      humidity: item.rh\n    }))\n}\n\nfunction OpenWeatherMapMapper(dataToMap) {\n  const items = dataToMap.list\n  return items\n    .filter(item => item.dt_txt.includes('15:00:00'))\n    .slice(0, 10)\n    .map((item) => ({\n      date: item.dt_txt.substr(0, 10),\n      temp: Math.round((item.main.temp - 273)),\n      pressure: Math.round(item.main.pressure),\n      wind: item.wind.speed.toFixed(1),\n      desc: item.weather[0].description,\n      humidity: item.main.humidity\n    }))\n}\n\nfunction WwOnline(dataToMap) {\n  const items = dataToMap.data.weather\n  return items\n    .map((item) => ({\n      date: item.date,\n      temp: Math.round(item.avgtempC),\n      pressure: item.hourly[4].pressure,\n      wind: (item.hourly[4].windspeedKmph / 3.6).toFixed(1),\n      desc: item.hourly[4].weatherDesc[0].value,\n      humidity: item.hourly[4].humidity\n    }))\n}","import { takeEvery, all, call, put, select, delay } from \"redux-saga/effects\"\nimport axios from 'axios'\nimport providersApiSpec from '../providersListApi'\nimport dataMapper from './dataMapper'\nimport {actions} from '../actions'\n\nconst getProviderData = state => state.providersData\nconst getQueryString = state => state.searchRequest\n\nexport default function* watchClick() {\n  yield all([takeEvery(actions.BUTTON_CLICK, handleSendRequest),\n  takeEvery(actions.BUTTON_CLICK, loaderHandler)])\n\n}\n//Обработка условия => если загрузка длится более 1сек, то показываем\n//лоадер\nfunction* loaderHandler(action) {\n  const { providerName } = action\n  yield delay(1000)\n  const providersData = yield select(getProviderData)\n  const [currentProvider] = providersData\n    .filter(item => item.providerName === providerName)\n\n  if (currentProvider.loading) {\n    yield put({ type: actions.SHOW_LOADER, providerName })\n  }\n}\n\n//Обработка запроса на АПИ провайдера\nfunction* handleSendRequest(action) {\n  const { providerName } = action\n  //const [providerApiSpec] = providersApiSpec.filter(item => item.providerName === providerName)\n  const location = yield select(getQueryString)\n  const url = providersApiSpec[providerName].getUrl(location)\n  const providersData = yield select(getProviderData)\n  const [currentProvider] = providersData\n    .filter(item => item.providerName === providerName)\n\n  try {\n\n    if (currentProvider.isButtonPressed) {\n      yield put({ type: actions.SEND_REQUEST, providerName })\n      const dataFromApi = yield call(fetchForecast, url)\n      const dataMapped = dataMapper(dataFromApi.data, providerName)\n      yield delay(2000) // задержка 2 сек для наглядности отсрочки лоадера\n      yield put({ type: actions.DATA_LOADED, payload: dataMapped, providerName })\n    }\n  } catch (error) {\n    console.log('error when fetching data from API:', error)\n    yield put({ type: actions.API_ERRORED, payload: error, providerName })\n  }\n}\n\nfunction fetchForecast(queryString) {\n  return axios.get(`${queryString}`)\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\n\nconst ProviderButton = ({ handleClick, providerName, isPressed }) => {\n  return (\n    <Button size=\"small\" color=\"secondary\"\n      onClick={handleClick}\n      variant={isPressed ? 'contained' : 'outlined'}>{providerName}</Button>\n  );\n}\n\nexport default ProviderButton;\n\n","import React from 'react'\nimport ProviderButton from '../view-components/ProviderButton'\nimport { handleClick } from '../actions'\nimport { connect } from 'react-redux'\n\n//Компонент-контейнер, рендерит список кнопок погодных провайлеров\nconst ButtonPanel = ({ providersData, handleClick }) => {\n\n  const buttons = providersData.map((provider, ind) => {\n    const { providerName, isButtonPressed } = provider\n\n    return <ProviderButton\n      key={ind}\n      providerName={providerName}\n      isPressed={isButtonPressed}\n      handleClick={() => handleClick(providerName)}\n    />\n  })\n\n  return (\n    <div className=\"button-panel\">\n      {buttons}\n    </div>\n  )\n}\n\nconst mapToProps = state => ({ providersData: state.providersData })\n\nexport default connect(mapToProps, { handleClick })(ButtonPanel)\n\n","import React from 'react';\n\nconst DayForecastBlock = ({ item, day, month }) => {\n  return (\n    <div className=\"weather-indicators\">\n      <div className=\"date\">{day} {month}  </div>\n      <div className=\"temp\">{item.temp}°C</div>\n      <div className=\"press\"><span>P, hpa:</span> {item.pressure}</div>\n      <div className=\"wind\"><span>W, m/s:</span>  {item.wind}</div>\n      <div className=\"hum\"><span>H, %:</span>  {item.humidity}</div>\n      <div className=\"desc\">{item.desc}</div>\n    </div>\n  )\n}\n\nexport default DayForecastBlock","import React from 'react';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Paper from '@material-ui/core/Paper';\nimport './ProviderForecastView.scss'\n\nconst ProviderForecastBlock = ({ providerName, daysButtons, dataByDayCondition }) => {\n\n  return (\n    <div className=\"provider-data-block\">\n      <Paper>\n        <div className=\"header\">\n          <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\n            {daysButtons}\n          </ButtonGroup>\n          <div className=\"provider-name\">{providerName}</div>\n        </div>\n        <div className=\"forecast-block\">{dataByDayCondition || 'Something went wrong'}</div>\n      </Paper>\n    </div>\n  )\n}\n\nexport default ProviderForecastBlock;\n\n","import React, { Component } from 'react'\nimport Button from '@material-ui/core/Button'\nimport { connect } from 'react-redux'\nimport DayForecast from '../view-components/DayForecast'\nimport ProviderForecastView from '../view-components/ProviderForecastView'\n\n//Контейнер отвечает за рендер блока провайдера\n//хранит внутренне состояние кнопок 1-5-10 дн прогноз\nclass ProviderForecastBlock extends Component {\n  state = {\n    '1-Day': true,\n    '5-Days': false,\n    '10-Days': false,\n  }\n\n  clickHandler = (objKey) => { //переключаем активную кнопку (1-5-10 дней)\n    if (!this.state[objKey]) {\n      let prop\n      for ( prop in this.state) {\n        this.setState({ [prop]: false })\n      }\n      this.setState({ [objKey]: true })\n    }\n  }\n\n  render() {\n    const { providerName, data } = this.props;\n\n    const indexToSlice = (() => { //берем цифру дней из ключа кнопки в стейте\n      let prop\n      for (prop in this.state) {\n        if (this.state[prop]) return parseInt(prop.match(/\\d+/))\n      }\n    })();\n\n    //генерация блоков для 1-5-10дн прогноза\n    const dataByDayCondition = Array.isArray(data) && data\n      .slice(0, indexToSlice)\n      .map((item, ind) => {\n        const day = new Date(item.date).getDate()\n        const mlist = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n        const month = new Date(item.date).getMonth()\n        return (\n          <DayForecast key={ind} item={item} day={day < 10 ? `0${day}` : day} month={mlist[month]}/>\n        )\n      })\n\n    //генерация кнопок для 1-5-10дн прогноза\n    const daysButtons = Object.keys(this.state).map((key, ind) => {\n      return <Button\n      size=\"small\" \n        key={ind}\n        variant={this.state[key] ? 'contained' : 'outlined'}\n        onClick={() => this.clickHandler(key)}\n      >{key}</Button>\n    })\n\n    return (\n      <ProviderForecastView\n        providerName={providerName}\n        daysButtons={daysButtons}\n        dataByDayCondition={dataByDayCondition || data}\n      />\n    );\n  }\n}\n\nconst mapToProps = (state, ownProps) => {\n  return {\n    providerName: ownProps.providerName,\n    data: ownProps.data\n  }\n}\n\nexport default connect(mapToProps)(ProviderForecastBlock)\n","import React from 'react';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nconst Loader = () => {\n\n  return (\n    <div className={\"loader\"}>\n      <LinearProgress />\n      <br />\n      <LinearProgress color=\"secondary\" />\n    </div>\n  );\n}\n\nexport default Loader;","import React from 'react'\nimport ProviderForecastBlock from './ProviderForecastBlock'\nimport { connect } from 'react-redux'\nimport Loader from '../view-components/Loader'\n\n//Контейнер рендерит блок, где отображуются все вызванные провайдеры\nconst Results = ({ providersData }) => {\n\n  const results = providersData.map((item, ind) => {\n    if (item.showloader) {\n      return <Loader key={ind}/>\n    }\n\n    return item.dataLoaded !== null || item.error ?\n      <ProviderForecastBlock\n        key={ind}\n        providerName={item.providerName}\n        loading={item.loading}\n        data={item.error ? item.errorMessage.message : item.dataLoaded}\n      /> : false\n  })\n\n  return (\n    <div className=\"results\">\n      {results}\n    </div>\n  );\n}\n\nconst mapToProps = (state) => {\n  return { providersData: state.providersData }\n}\n\nexport default connect(mapToProps)(Results)\n","import React from 'react'\nimport TextField from '@material-ui/core/TextField'\nimport { connect } from 'react-redux'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst changeInput = (ev = 'toEmpty') => {\n  return {\n    type: 'CHANGE_INPUT',\n    inputvalue: ev === 'toEmpty' ? '' : ev.target.value\n  }\n}\n\nconst useStyles = makeStyles(theme => ({\n  dense: {\n    marginTop: '15px',\n  }\n}));\n\nconst SearchInput = ({ inputValue, changeInput }) => {\n  const classes = useStyles();\n  return (\n    <div className=\"header\">\n      <TextField\n        id=\"outlined\"\n        label=\"Location\"\n        placeholder=\"Type location\"\n        className={classes.dense}\n        margin=\"dense\"\n        variant=\"outlined\"\n        onChange={changeInput}\n        onClick={() => changeInput('toEmpty')}\n        value={inputValue}\n      />\n      <div className=\"caption\">WEATHER FORECAST AGGREGATOR</div>\n    </div>\n  );\n}\nconst mapToProps = (state) => ({ inputValue: state.searchRequest })\n\nexport default connect(mapToProps, { changeInput })(SearchInput)\n\n","import React from 'react'\nimport 'typeface-roboto'\nimport ButtonPanel from '../components/ButtonPanel'\nimport Results from '../components/Results'\nimport SearchInput from '../components/SearchInput'\nimport './App.scss';\n\nconst App = () => {\n  \n  return (\n    <div className=\"App\">\n      <SearchInput/>\n        <ButtonPanel />\n        <Results/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport reducer from './reducers/mainReducer'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport createSagaMiddleware from \"redux-saga\"\nimport apiSaga from './sagas/api-saga'\nimport App from './view-components/App'\n\nconst initialiseSagaMiddleware = createSagaMiddleware()\n\nconst store = createStore(\n  reducer, composeWithDevTools(\n    applyMiddleware(initialiseSagaMiddleware)\n))\n\ninitialiseSagaMiddleware.run(apiSaga)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'))"],"sourceRoot":""}